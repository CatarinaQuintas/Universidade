start
pushi 0
pushi 13
pushi 15

pusha f1
call
pop 2

writei
stop

f1:
pushl -2
pushl -1
mul
storel -3
return

//
f ∷ p1,p2,...,pn → r1,r2,...,rk

start
pushn k
push p1
push p2
...
push pn

pusha f
call
pop n // remove arguments from stack
// k top args are the result of f
stop

f:
pushl -n        // p1
pushl -n+1      // p2
...
pushl -1        // pn
...
storel (-n-k)   // r1
...
storel (-n-k+1) // r2
...
storel (-n-1)   // rn
...
return


//
start
...
stop

cond: // its just a function


while:
pushl -1
call
jz end
<body>
jump while
end:
return

//

(let (x 5))

parser.vars['x'] = 5

////

'(e1 e2 '(e3 e4) e5 e6)

(forin x l (print x))

l1:

////

(defun (func x y)
    (mult 1 3)
)


(mult 3 (add 4 (sub 6 7)))

   mult
  /    \
 add    3
/   \
4   sub
   /   \
  6     7

(mult (add 4 (sub 6 7)) 3)


pushi 6
pushi 7
sub
pushi 4
add
pushi 3
mul

6
7
sub
4
add
3
mul

-1
4
add
3
mul

////

soma3 ∷ (ℕ,ℕ,ℕ) -> (ℕ)


start
stop
soma3:

f ∷ p1,p2,...,pn → r1,r2,...,rk

start
pushn 1
pushi p1
pushi p2
pushi p3

pusha soma3
call
pop 3

writei
stop

soma3:
pushl -3 // p1
pushl -2 // p2
pushl -1 // p3
add
add

storel -4   // r1
return